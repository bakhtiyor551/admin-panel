import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
import compression from 'compression';
import rateLimit from 'express-rate-limit';
import { createServer } from 'http';
import { Server } from 'socket.io';
import { config } from './config/config.js';
import { pool, checkDatabaseConnection } from './db.js';
import { logger } from './utils/logger.js';
import { errorHandler, notFound } from './middleware/errorHandler.js';
import { initializeDatabase } from './utils/dbInit.js';
import { setupSocketHandlers } from './socket/socketHandlers.js';

// –ò–º–ø–æ—Ä—Ç —Ä–æ—É—Ç–æ–≤
import authRoutes from './routes/authRoutes.js';
import vehicleRoutes from './routes/vehicleRoutes.js';
import positionRoutes from './routes/positionRoutes.js';
import routeRoutes from './routes/routeRoutes.js';
import driverRoutes from './routes/driverRoutes.js';

const app = express();

// Middleware –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
app.use(helmet());
app.use(compression());

// CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
app.use(cors({
  origin: config.server.isDev ? '*' : process.env.FRONTEND_URL,
  credentials: true
}));

// Rate limiting
const limiter = rateLimit({
  windowMs: config.rateLimit.windowMs,
  max: config.rateLimit.max,
  message: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —ç—Ç–æ–≥–æ IP, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'
});

app.use('/api/', limiter);

// –ü–∞—Ä—Å–∏–Ω–≥ JSON
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  logger.info(`${req.method} ${req.path}`, {
    ip: req.ip,
    userAgent: req.get('user-agent')
  });
  next();
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
app.get('/health', (req, res) => {
  res.json({
    status: 'ok',
    timestamp: new Date(),
    uptime: process.uptime()
  });
});

// API —Ä–æ—É—Ç—ã
app.use('/api/auth', authRoutes);
app.use('/api/vehicles', vehicleRoutes);
app.use('/api/positions', positionRoutes);
app.use('/api/routes', routeRoutes);
app.use('/api/drivers', driverRoutes);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
app.use(notFound);

// –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use(errorHandler);

// –°–æ–∑–¥–∞–Ω–∏–µ HTTP —Å–µ—Ä–≤–µ—Ä–∞
const httpServer = createServer(app);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Socket.IO
const io = new Server(httpServer, {
  cors: config.socket.cors,
  pingTimeout: 60000,
  pingInterval: 25000
});

// –°–æ—Ö—Ä–∞–Ω—è–µ–º io –≤ app –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ —Ä–æ—É—Ç–æ–≤
app.set('io', io);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Socket.IO
setupSocketHandlers(io);

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    const dbConnected = await checkDatabaseConnection();
    if (!dbConnected) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await initializeDatabase();
    
    // –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞
    httpServer.listen(config.server.port, () => {
      logger.info(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${config.server.port}`);
      logger.info(`üìä –û–∫—Ä—É–∂–µ–Ω–∏–µ: ${config.server.env}`);
      logger.info(`üîå Socket.IO –≥–æ—Ç–æ–≤ –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º`);
      
      if (config.server.isDev) {
        logger.info(`üìù API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:${config.server.port}/api-docs`);
      }
    });
    
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    process.exit(1);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
process.on('SIGTERM', gracefulShutdown);
process.on('SIGINT', gracefulShutdown);

async function gracefulShutdown() {
  logger.info('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –Ω–∞—á–∏–Ω–∞–µ–º graceful shutdown...');
  
  // –ó–∞–∫—Ä—ã–≤–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
  httpServer.close(() => {
    logger.info('HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç');
  });
  
  // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Socket.IO
  io.close(() => {
    logger.info('Socket.IO –∑–∞–∫—Ä—ã—Ç');
  });
  
  // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î
  try {
    await pool.end();
    logger.info('–ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î –∑–∞–∫—Ä—ã—Ç');
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—É–ª–∞ –ë–î:', error);
  }
  
  process.exit(0);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
startServer(); 